// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ImageStore.proto

package ImageStore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message for Read interface
type ReadReq struct {
	ReadKeyname          string   `protobuf:"bytes,1,opt,name=readKeyname,proto3" json:"readKeyname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadReq) Reset()         { *m = ReadReq{} }
func (m *ReadReq) String() string { return proto.CompactTextString(m) }
func (*ReadReq) ProtoMessage()    {}
func (*ReadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImageStore_c2e719d4ca08a616, []int{0}
}
func (m *ReadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadReq.Unmarshal(m, b)
}
func (m *ReadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadReq.Marshal(b, m, deterministic)
}
func (dst *ReadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadReq.Merge(dst, src)
}
func (m *ReadReq) XXX_Size() int {
	return xxx_messageInfo_ReadReq.Size(m)
}
func (m *ReadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReadReq proto.InternalMessageInfo

func (m *ReadReq) GetReadKeyname() string {
	if m != nil {
		return m.ReadKeyname
	}
	return ""
}

// Response message for Read interface
type ReadResp struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadResp) Reset()         { *m = ReadResp{} }
func (m *ReadResp) String() string { return proto.CompactTextString(m) }
func (*ReadResp) ProtoMessage()    {}
func (*ReadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImageStore_c2e719d4ca08a616, []int{1}
}
func (m *ReadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadResp.Unmarshal(m, b)
}
func (m *ReadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadResp.Marshal(b, m, deterministic)
}
func (dst *ReadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResp.Merge(dst, src)
}
func (m *ReadResp) XXX_Size() int {
	return xxx_messageInfo_ReadResp.Size(m)
}
func (m *ReadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResp proto.InternalMessageInfo

func (m *ReadResp) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

// The request message for Store interface
type StoreReq struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	MemoryType           string   `protobuf:"bytes,2,opt,name=memoryType,proto3" json:"memoryType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreReq) Reset()         { *m = StoreReq{} }
func (m *StoreReq) String() string { return proto.CompactTextString(m) }
func (*StoreReq) ProtoMessage()    {}
func (*StoreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImageStore_c2e719d4ca08a616, []int{2}
}
func (m *StoreReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreReq.Unmarshal(m, b)
}
func (m *StoreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreReq.Marshal(b, m, deterministic)
}
func (dst *StoreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreReq.Merge(dst, src)
}
func (m *StoreReq) XXX_Size() int {
	return xxx_messageInfo_StoreReq.Size(m)
}
func (m *StoreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreReq.DiscardUnknown(m)
}

var xxx_messageInfo_StoreReq proto.InternalMessageInfo

func (m *StoreReq) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *StoreReq) GetMemoryType() string {
	if m != nil {
		return m.MemoryType
	}
	return ""
}

// The response message for Store interface
type StoreResp struct {
	StoreKeyname         string   `protobuf:"bytes,1,opt,name=storeKeyname,proto3" json:"storeKeyname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreResp) Reset()         { *m = StoreResp{} }
func (m *StoreResp) String() string { return proto.CompactTextString(m) }
func (*StoreResp) ProtoMessage()    {}
func (*StoreResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImageStore_c2e719d4ca08a616, []int{3}
}
func (m *StoreResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreResp.Unmarshal(m, b)
}
func (m *StoreResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreResp.Marshal(b, m, deterministic)
}
func (dst *StoreResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreResp.Merge(dst, src)
}
func (m *StoreResp) XXX_Size() int {
	return xxx_messageInfo_StoreResp.Size(m)
}
func (m *StoreResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreResp.DiscardUnknown(m)
}

var xxx_messageInfo_StoreResp proto.InternalMessageInfo

func (m *StoreResp) GetStoreKeyname() string {
	if m != nil {
		return m.StoreKeyname
	}
	return ""
}

// The request message for GetConfig
type RemoveReq struct {
	RemKeyname           string   `protobuf:"bytes,1,opt,name=remKeyname,proto3" json:"remKeyname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveReq) Reset()         { *m = RemoveReq{} }
func (m *RemoveReq) String() string { return proto.CompactTextString(m) }
func (*RemoveReq) ProtoMessage()    {}
func (*RemoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImageStore_c2e719d4ca08a616, []int{4}
}
func (m *RemoveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveReq.Unmarshal(m, b)
}
func (m *RemoveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveReq.Marshal(b, m, deterministic)
}
func (dst *RemoveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveReq.Merge(dst, src)
}
func (m *RemoveReq) XXX_Size() int {
	return xxx_messageInfo_RemoveReq.Size(m)
}
func (m *RemoveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveReq proto.InternalMessageInfo

func (m *RemoveReq) GetRemKeyname() string {
	if m != nil {
		return m.RemKeyname
	}
	return ""
}

// The response message for GetConfig
type RemoveResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveResp) Reset()         { *m = RemoveResp{} }
func (m *RemoveResp) String() string { return proto.CompactTextString(m) }
func (*RemoveResp) ProtoMessage()    {}
func (*RemoveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ImageStore_c2e719d4ca08a616, []int{5}
}
func (m *RemoveResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveResp.Unmarshal(m, b)
}
func (m *RemoveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveResp.Marshal(b, m, deterministic)
}
func (dst *RemoveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveResp.Merge(dst, src)
}
func (m *RemoveResp) XXX_Size() int {
	return xxx_messageInfo_RemoveResp.Size(m)
}
func (m *RemoveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReadReq)(nil), "ImageStore.ReadReq")
	proto.RegisterType((*ReadResp)(nil), "ImageStore.ReadResp")
	proto.RegisterType((*StoreReq)(nil), "ImageStore.StoreReq")
	proto.RegisterType((*StoreResp)(nil), "ImageStore.StoreResp")
	proto.RegisterType((*RemoveReq)(nil), "ImageStore.RemoveReq")
	proto.RegisterType((*RemoveResp)(nil), "ImageStore.RemoveResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IsClient is the client API for Is service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IsClient interface {
	// **********ImageStore Interfaces***************
	// Read external interface
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (Is_ReadClient, error)
	// Store external interface
	Store(ctx context.Context, opts ...grpc.CallOption) (Is_StoreClient, error)
	// Remove external interface
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error)
}

type isClient struct {
	cc *grpc.ClientConn
}

func NewIsClient(cc *grpc.ClientConn) IsClient {
	return &isClient{cc}
}

func (c *isClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (Is_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Is_serviceDesc.Streams[0], "/ImageStore.is/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &isReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Is_ReadClient interface {
	Recv() (*ReadResp, error)
	grpc.ClientStream
}

type isReadClient struct {
	grpc.ClientStream
}

func (x *isReadClient) Recv() (*ReadResp, error) {
	m := new(ReadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *isClient) Store(ctx context.Context, opts ...grpc.CallOption) (Is_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Is_serviceDesc.Streams[1], "/ImageStore.is/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &isStoreClient{stream}
	return x, nil
}

type Is_StoreClient interface {
	Send(*StoreReq) error
	CloseAndRecv() (*StoreResp, error)
	grpc.ClientStream
}

type isStoreClient struct {
	grpc.ClientStream
}

func (x *isStoreClient) Send(m *StoreReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *isStoreClient) CloseAndRecv() (*StoreResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *isClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := c.cc.Invoke(ctx, "/ImageStore.is/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsServer is the server API for Is service.
type IsServer interface {
	// **********ImageStore Interfaces***************
	// Read external interface
	Read(*ReadReq, Is_ReadServer) error
	// Store external interface
	Store(Is_StoreServer) error
	// Remove external interface
	Remove(context.Context, *RemoveReq) (*RemoveResp, error)
}

func RegisterIsServer(s *grpc.Server, srv IsServer) {
	s.RegisterService(&_Is_serviceDesc, srv)
}

func _Is_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IsServer).Read(m, &isReadServer{stream})
}

type Is_ReadServer interface {
	Send(*ReadResp) error
	grpc.ServerStream
}

type isReadServer struct {
	grpc.ServerStream
}

func (x *isReadServer) Send(m *ReadResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Is_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IsServer).Store(&isStoreServer{stream})
}

type Is_StoreServer interface {
	SendAndClose(*StoreResp) error
	Recv() (*StoreReq, error)
	grpc.ServerStream
}

type isStoreServer struct {
	grpc.ServerStream
}

func (x *isStoreServer) SendAndClose(m *StoreResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *isStoreServer) Recv() (*StoreReq, error) {
	m := new(StoreReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Is_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImageStore.is/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Is_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ImageStore.is",
	HandlerType: (*IsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Remove",
			Handler:    _Is_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Is_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Store",
			Handler:       _Is_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ImageStore.proto",
}

func init() { proto.RegisterFile("ImageStore.proto", fileDescriptor_ImageStore_c2e719d4ca08a616) }

var fileDescriptor_ImageStore_c2e719d4ca08a616 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x4d, 0xb1, 0xb5, 0x73, 0x9c, 0x85, 0x5c, 0x5b, 0x29, 0xb3, 0x28, 0x43, 0x56, 0x85,
	0x42, 0x15, 0x45, 0xd0, 0x9d, 0x5b, 0x71, 0x17, 0x7d, 0x81, 0xd1, 0x5e, 0x54, 0x24, 0x4d, 0x4c,
	0xaa, 0x30, 0x6f, 0xe5, 0x23, 0x4a, 0x32, 0x33, 0x38, 0xc1, 0x59, 0xe6, 0xe3, 0xbb, 0xe7, 0xfe,
	0x04, 0x27, 0xf7, 0xba, 0x7a, 0xe5, 0xc7, 0xbd, 0x71, 0xbc, 0xb1, 0xce, 0xec, 0x0d, 0xe1, 0x8f,
	0xc8, 0x35, 0x8e, 0x14, 0x57, 0x5b, 0xc5, 0x9f, 0x54, 0xe2, 0xd8, 0x71, 0xb5, 0x7d, 0xe0, 0x7a,
	0x57, 0x69, 0x5e, 0x88, 0x52, 0xac, 0x32, 0xd5, 0x47, 0xb2, 0xc4, 0xb4, 0x91, 0xbd, 0xa5, 0x19,
	0xc6, 0x2f, 0x6f, 0x5f, 0xbb, 0x8f, 0xe8, 0xe5, 0xaa, 0x79, 0xc8, 0x3b, 0x4c, 0x63, 0x6e, 0xc8,
	0x1b, 0x34, 0x68, 0x09, 0x68, 0xd6, 0xc6, 0xd5, 0x4f, 0xb5, 0xe5, 0xc5, 0x28, 0x36, 0xe9, 0x11,
	0x79, 0x8e, 0xac, 0x4d, 0xf0, 0x96, 0x24, 0x72, 0x1f, 0x1e, 0xe9, 0x4c, 0x09, 0x93, 0x6b, 0x64,
	0x8a, 0xb5, 0xf9, 0x8e, 0x3d, 0x97, 0x80, 0x63, 0x9d, 0xea, 0x3d, 0x22, 0x73, 0xa0, 0x93, 0xbd,
	0xbd, 0xfc, 0x11, 0x18, 0xbd, 0x7b, 0xba, 0xc6, 0x61, 0x58, 0x8b, 0x4e, 0x37, 0xbd, 0x53, 0xb5,
	0x57, 0x29, 0x66, 0xff, 0xa1, 0xb7, 0xf2, 0xe0, 0x42, 0xd0, 0x0d, 0xc6, 0x91, 0x52, 0xa2, 0x74,
	0xeb, 0x17, 0xf3, 0x01, 0x1a, 0x2a, 0x57, 0x82, 0x6e, 0x31, 0x69, 0xa6, 0xa0, 0x79, 0x9a, 0xde,
	0xae, 0x51, 0x9c, 0x0d, 0xe1, 0x50, 0xfc, 0x3c, 0x89, 0x5f, 0x78, 0xf5, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x67, 0x8d, 0x0f, 0xb4, 0xd6, 0x01, 0x00, 0x00,
}
