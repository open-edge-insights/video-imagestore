// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ImageStore.proto

#include "ImageStore.pb.h"
#include "ImageStore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ImageStore {

static const char* is_method_names[] = {
  "/ImageStore.is/Read",
  "/ImageStore.is/Store",
  "/ImageStore.is/Remove",
};

std::unique_ptr< is::Stub> is::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< is::Stub> stub(new is::Stub(channel));
  return stub;
}

is::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Read_(is_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Store_(is_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Remove_(is_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::ImageStore::ReadResp>* is::Stub::ReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::ImageStore::ReadResp>::Create(channel_.get(), rpcmethod_Read_, context, request);
}

::grpc::ClientAsyncReader< ::ImageStore::ReadResp>* is::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ImageStore::ReadResp>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ImageStore::ReadResp>* is::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ImageStore::ReadResp>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::ImageStore::StoreReq>* is::Stub::StoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response) {
  return ::grpc::internal::ClientWriterFactory< ::ImageStore::StoreReq>::Create(channel_.get(), rpcmethod_Store_, context, response);
}

::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>* is::Stub::AsyncStoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ImageStore::StoreReq>::Create(channel_.get(), cq, rpcmethod_Store_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>* is::Stub::PrepareAsyncStoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ImageStore::StoreReq>::Create(channel_.get(), cq, rpcmethod_Store_, context, response, false, nullptr);
}

::grpc::Status is::Stub::Remove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::ImageStore::RemoveResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void is::Stub::experimental_async::Remove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>* is::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ImageStore::RemoveResp>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>* is::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ImageStore::RemoveResp>::Create(channel_.get(), cq, rpcmethod_Remove_, context, request, false);
}

is::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      is_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< is::Service, ::ImageStore::ReadReq, ::ImageStore::ReadResp>(
          std::mem_fn(&is::Service::Read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      is_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< is::Service, ::ImageStore::StoreReq, ::ImageStore::StoreResp>(
          std::mem_fn(&is::Service::Store), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      is_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< is::Service, ::ImageStore::RemoveReq, ::ImageStore::RemoveResp>(
          std::mem_fn(&is::Service::Remove), this)));
}

is::Service::~Service() {
}

::grpc::Status is::Service::Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status is::Service::Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status is::Service::Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ImageStore

