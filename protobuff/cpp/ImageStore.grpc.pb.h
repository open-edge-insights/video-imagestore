// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ImageStore.proto
#ifndef GRPC_ImageStore_2eproto__INCLUDED
#define GRPC_ImageStore_2eproto__INCLUDED

#include "ImageStore.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace ImageStore {

// The ImageStore service definition.
class is final {
 public:
  static constexpr char const* service_full_name() {
    return "ImageStore.is";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // **********ImageStore Interfaces***************
    // Read external interface
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ImageStore::ReadResp>> Read(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ImageStore::ReadResp>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageStore::ReadResp>> AsyncRead(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageStore::ReadResp>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageStore::ReadResp>> PrepareAsyncRead(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageStore::ReadResp>>(PrepareAsyncReadRaw(context, request, cq));
    }
    // Store external interface
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ImageStore::StoreReq>> Store(::grpc::ClientContext* context, ::ImageStore::StoreResp* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ImageStore::StoreReq>>(StoreRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageStore::StoreReq>> AsyncStore(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageStore::StoreReq>>(AsyncStoreRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageStore::StoreReq>> PrepareAsyncStore(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageStore::StoreReq>>(PrepareAsyncStoreRaw(context, response, cq));
    }
    // Remove external interface
    virtual ::grpc::Status Remove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::ImageStore::RemoveResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImageStore::RemoveResp>> AsyncRemove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImageStore::RemoveResp>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImageStore::RemoveResp>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImageStore::RemoveResp>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // **********ImageStore Interfaces***************
      // Read external interface
      // Store external interface
      // Remove external interface
      virtual void Remove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::ImageStore::ReadResp>* ReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ImageStore::ReadResp>* AsyncReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ImageStore::ReadResp>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::ImageStore::StoreReq>* StoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ImageStore::StoreReq>* AsyncStoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ImageStore::StoreReq>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ImageStore::RemoveResp>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ImageStore::RemoveResp>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::ImageStore::ReadResp>> Read(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ImageStore::ReadResp>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageStore::ReadResp>> AsyncRead(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageStore::ReadResp>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageStore::ReadResp>> PrepareAsyncRead(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageStore::ReadResp>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::ImageStore::StoreReq>> Store(::grpc::ClientContext* context, ::ImageStore::StoreResp* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ImageStore::StoreReq>>(StoreRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>> AsyncStore(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>>(AsyncStoreRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>> PrepareAsyncStore(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>>(PrepareAsyncStoreRaw(context, response, cq));
    }
    ::grpc::Status Remove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::ImageStore::RemoveResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>> AsyncRemove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Remove(::grpc::ClientContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::ImageStore::ReadResp>* ReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request) override;
    ::grpc::ClientAsyncReader< ::ImageStore::ReadResp>* AsyncReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ImageStore::ReadResp>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::ImageStore::ReadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::ImageStore::StoreReq>* StoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response) override;
    ::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>* AsyncStoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ImageStore::StoreReq>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, ::ImageStore::StoreResp* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ImageStore::RemoveResp>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::ImageStore::RemoveReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_Store_;
    const ::grpc::internal::RpcMethod rpcmethod_Remove_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // **********ImageStore Interfaces***************
    // Read external interface
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer);
    // Store external interface
    virtual ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response);
    // Remove external interface
    virtual ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::ImageStore::ReadReq* request, ::grpc::ServerAsyncWriter< ::ImageStore::ReadResp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Store() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ImageStore::StoreResp, ::ImageStore::StoreReq>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Remove() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::ImageStore::RemoveReq* request, ::grpc::ServerAsyncResponseWriter< ::ImageStore::RemoveResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<WithAsyncMethod_Store<WithAsyncMethod_Remove<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Store() {
    }
    ~ExperimentalWithCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Remove() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_Remove<BaseClass>, ::ImageStore::RemoveReq, ::ImageStore::RemoveResp>(
          [this](::grpc::ServerContext* context,
                 const ::ImageStore::RemoveReq* request,
                 ::ImageStore::RemoveResp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Remove(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Store<ExperimentalWithCallbackMethod_Remove<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Store() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Remove() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Store() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Remove() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Store() {
    }
    ~ExperimentalWithRawCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageStore::StoreReq>* reader, ::ImageStore::StoreResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Remove() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_Remove<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Remove(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Remove(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Remove() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ImageStore::RemoveReq, ::ImageStore::RemoveResp>(std::bind(&WithStreamedUnaryMethod_Remove<BaseClass>::StreamedRemove, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Remove(::grpc::ServerContext* context, const ::ImageStore::RemoveReq* request, ::ImageStore::RemoveResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ImageStore::RemoveReq,::ImageStore::RemoveResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Remove<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::ImageStore::ReadReq, ::ImageStore::ReadResp>(std::bind(&WithSplitStreamingMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::ImageStore::ReadReq* request, ::grpc::ServerWriter< ::ImageStore::ReadResp>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ImageStore::ReadReq,::ImageStore::ReadResp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Read<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Read<WithStreamedUnaryMethod_Remove<Service > > StreamedService;
};

}  // namespace ImageStore


#endif  // GRPC_ImageStore_2eproto__INCLUDED
